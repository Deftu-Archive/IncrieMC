/* ========================================================= */
/* Don't modify this file unless you know what you're doing! */
/* Don't modify this file unless you know what you're doing! */
/* Don't modify this file unless you know what you're doing! */
/* Don't modify this file unless you know what you're doing! */
/* Don't modify this file unless you know what you're doing! */
/* Don't modify this file unless you know what you're doing! */
/* Don't modify this file unless you know what you're doing! */
/* Don't modify this file unless you know what you're doing! */
/* Don't modify this file unless you know what you're doing! */
/* Don't modify this file unless you know what you're doing! */
/* Don't modify this file unless you know what you're doing! */
/* Don't modify this file unless you know what you're doing! */
/* Don't modify this file unless you know what you're doing! */
/* Don't modify this file unless you know what you're doing! */
/* Don't modify this file unless you know what you're doing! */
/* Don't modify this file unless you know what you're doing! */
/* ========================================================= */

def applyMixin = Boolean.valueOf(applyMixin)
def applyKotlin = Boolean.valueOf(applyKotlin)

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()

        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url = "https://jitpack.io/"
        }
        maven {
            url = "https://repo.spongepowered.org/maven/"
        }
    }

    dependencies {
        classpath("com.github.ReplayMod:ForgeGradle:${forgeGradleVersion}:all")
        classpath("gradle.plugin.com.github.johnrengelman:shadow:${shadowVersion}")
        if (applyMixin) classpath("dev.isXander:MixinGradle:${mixinGradleVersion}")
        if (applyKotlin) classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
    }
}

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "java"

version = projectVersion
group = projectGroup
archivesBaseName = projectName

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = "UTF-8"

if (applyMixin) {
    apply plugin: "org.spongepowered.mixin"

    mixin {
        disableRefMapWarning = true
        add(sourceSets.main, "mixins.${projectId}.refmap.json")
    }

    sourceSets {
        main {
            ext.refMap = "mixins.${projectId}.refmap.json"
        }
    }

    dependencies {
        if (Boolean.valueOf(bundleMixin)) {
            shade("org.spongepowered:mixin:${mixinVersion}");
        } else {
            implementation("org.spongepowered:mixin:${mixinVersion}")
        }

        annotationProcessor("org.spongepowered:mixin:${mixinVersion}")
    }
}

if (applyKotlin) {
    apply plugin: "org.jetbrains.kotlin.jvm"
    compileKotlin.kotlinOptions.languageVersion = kotlinLangVersion
    compileKotlin.kotlinOptions.jvmTarget = "1.8"
}

minecraft {
    version = minecraftVersion
    runDir = "run"

    replace('@NAME@', projectName)
    replace('@VERSION@': projectVersion)
    replace('@MODID@', projectId)

    mappings = findProperty("mappings")
    makeObfSourceJar = Boolean.valueOf(makeSourceJar)
}

configurations {
    /* Creates an extra dependency configuration that implements `implementation`, */
    /* to be used later to shade libraries. */

    shade
    implementation.extendsFrom(shade)
}

apply from: "gradle/resources.gradle"
apply from: "dependencies.gradle"

jar {
    enabled = false
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest.attributes(
            'ModSide': 'CLIENT',
            'ForceLoadAsMod': true
    )

    def tweaker = findProperty("tweaker")
    if (tweaker != null && !tweaker.toString().isEmpty()) {
        manifest.attributes(
                'TweakClass': tweaker
        )
    }
}

shadowJar {
    archiveClassifier.set(findProperty("classifier"))
    configurations = [project.configurations.shade]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    exclude 'LICENSE.md'
    exclude 'pack.mcmeta'
    exclude 'dummyThing'
    exclude '**/module-info.class'
    exclude '*.so'
    exclude '*.dylib'
    exclude '*.dll'
    exclude '*.jnilib'
    exclude 'ibxm/**'
    exclude 'com/jcraft/**'
    exclude 'org/lwjgl/**'
    exclude 'net/java/**'

    exclude 'META-INF/proguard/**'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/versions/**'
    exclude 'META-INF/com.android.tools/**'

    exclude 'fabric.mod.json'
}

reobf {
    shadowJar {
        classpath = sourceSets.main.compileClasspath
    }
}

reobfJar.dependsOn(shadowJar)