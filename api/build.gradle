apply plugin: "net.kyori.blossom"
apply plugin: "maven-publish"
apply plugin: "signing"

archivesBaseName = projectName

blossom {
    def name = "src/main/kotlin/xyz/incrie/api/Incrie.kt"
    replaceToken("@VERSION@", projectVersion, name)
    replaceToken("@NAME@", projectName, name)
    replaceToken("@ID@", projectId, name)
}

dependencies {
    shade("org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinCoroutinesVersion}")
    shade("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")

    shade("com.github.KevinPriv:keventbus:${eventBusVersion}")
    shade("xyz.deftu.deftils:Deftils:${deftilsVersion}")
    shade("com.github.ben-manes.caffeine:caffeine:${caffeineVersion}")
    shade("org.java-websocket:Java-WebSocket:${websocketVersion}")
    shade("com.squareup.okhttp3:okhttp:${okHttpVersion}")

    implementation("org.spongepowered:mixin:0.7.11-SNAPSHOT")

    implementation("gg.essential:universalcraft-1.18-fabric:${universalCraftVersion}") {
        exclude module: "kotlin-stdlib-jdk8"
        exclude module: "kotlin-reflect"
        exclude module: "minecraft"
        exclude module: "yarn"
        exclude module: "fabric-loader"
        exclude module: "fabric-api"
        exclude module: "forge"
    }
    implementation("gg.essential:elementa-1.18-fabric:${elementaVersion}") {
        exclude module: "kotlin-stdlib-jdk8"
        exclude module: "kotlin-reflect"
        exclude module: "minecraft"
        exclude module: "yarn"
        exclude module: "fabric-loader"
        exclude module: "fabric-api"
        exclude module: "forge"
    }

    implementation("org.apache.logging.log4j:log4j-api:2.17.0")
    implementation("org.apache.logging.log4j:log4j-core:2.17.0")
}

processResources {
    inputs.property("name", projectName)
    inputs.property("id", projectId)
    inputs.property("version", projectVersion)

    filesMatching("fabric.mod.json") {
        expand(
                "name": projectName,
                "id": projectId,
                "version": projectVersion
        )
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(shadowJar)
            artifact(sourcesJar)
            artifact(javadocJar)

            groupId = projectGroup
            artifactId = "$projectName-API"
            version = projectVersion

            pom {
                name = projectName
                description = projectDescription
                url = projectGit

                licenses {
                    license {
                        name = "GNU LESSER GENERAL PUBLIC LICENSE, Version 3"
                        url = "https://www.gnu.org/licenses/lgpl-3.0.en.html"
                    }
                }

                developers {
                    /* Define Incrie developer team here! <3 */
                    developer {
                        id = "deftu"
                        name = "Deftu"
                        email = "deftudev@gmail.com"
                    }
                }

                scm {
                    url = projectGit
                }
            }
        }
    }
}

artifacts {
    archives(javadocJar, sourcesJar)
}

signing {
    String password = findProperty("signing.password")
    if (password != null) {
        sign publishing.publications.mavenJava
        sign configurations.archives
    } else {
        System.out.println("Signing is unavailable.")
    }
}

classes.dependsOn(processResources)