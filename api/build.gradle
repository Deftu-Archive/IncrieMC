buildscript {
    def mcVersionStr = project.name.tokenize("-")[0]
    def (major, minor, patch) = mcVersionStr.tokenize(".")
    def base = major == null || minor == null
    if (base) mcVersionStr = "1.18"
    def mcVersion = base ? 11800 : "${major}${minor.padLeft(2, "0")}${(patch ?: "").padLeft(2, "0")}" as int
    def fabric = mcVersion >= 11400
    project.ext.mcVersion = mcVersion
    project.ext.mcVersionStr = mcVersionStr
    project.ext.mcPlatform = fabric ? "fabric" : "forge"
    project.ext.fabric = fabric
    project.ext.forge = !fabric

    repositories {
        mavenCentral()
        maven { url "https://maven.fabricmc.net/" }
        if (!fabric) maven { url "https://files.minecraftforge.net/maven" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://jitpack.io" }
    }

    dependencies {
        if (fabric) {
            classpath("fabric-loom:fabric-loom.gradle.plugin:0.10-SNAPSHOT")
        } else {
            def forgeGradleVersion = mcVersion >= 11200 ? "717a9f4" :
                    mcVersion >= 10904 ? "83163c1" :
                            "4be84bf"
            classpath("com.github.ReplayMod:ForgeGradle:$forgeGradleVersion:all") {
                exclude group: "net.sf.trove4j", module: "trove4j"
                exclude group: "trove", module: "trove"
            }
        }
    }
}

def FABRIC = fabric
if (FABRIC) {
    apply plugin: "fabric-loom"
} else {
    apply plugin: "net.minecraftforge.gradle.forge"
}

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "com.replaymod.preprocess-root"
apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: "net.kyori.blossom"
apply plugin: "maven-publish"
apply plugin: "java"

archivesBaseName = projectName

blossom {
    def name = "src/main/kotlin/xyz/incrie/api/Incrie.kt"
    replaceToken("@VERSION@", projectVersion, name)
    replaceToken("@NAME@", projectName, name)
    replaceToken("@ID@", projectId, name)
}

preprocess {
    def api11800 = createNode("api:1.18", 11800, "yarn")
    System.out.println(api11800)
}

dependencies {
    if (FABRIC) {
        minecraft("com.mojang:minecraft:" + [
                11800: "1.18"
        ][mcVersion])
        mappings("net.fabricmc:yarn:" + [
                11800: "1.18+build.1:v2"
        ][mcVersion])
    }

    shade("org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinCoroutinesVersion}")
    shade("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")

    shade(api("com.github.KevinPriv:keventbus:${eventBusVersion}"))
    shade("xyz.deftu.deftils:Deftils:${deftilsVersion}")
    shade("com.github.ben-manes.caffeine:caffeine:${caffeineVersion}")
    shade(api("org.java-websocket:Java-WebSocket:${websocketVersion}"))
    shade(api("com.squareup.okhttp3:okhttp:${okHttpVersion}"))

    compileOnly("org.spongepowered:mixin:0.7.11-SNAPSHOT")

    shade(api("gg.essential:universalcraft-$mcVersionStr-$mcPlatform:${universalCraftVersion}")) {
        exclude module: "kotlin-stdlib-jdk8"
        exclude module: "kotlin-reflect"
        exclude module: "minecraft"
        exclude module: "yarn"
        exclude module: "fabric-loader"
        exclude module: "fabric-api"
        exclude module: "forge"
    }
    shade(api("gg.essential:elementa-$mcVersionStr-$mcPlatform:${elementaVersion}")) {
        exclude module: "kotlin-stdlib-jdk8"
        exclude module: "kotlin-reflect"
        exclude module: "minecraft"
        exclude module: "yarn"
        exclude module: "fabric-loader"
        exclude module: "fabric-api"
        exclude module: "forge"
    }

    implementation("org.apache.logging.log4j:log4j-api:2.17.0")
    implementation("org.apache.logging.log4j:log4j-core:2.17.0")
}

processResources {
    inputs.property("name", projectName)
    inputs.property("id", projectId)
    inputs.property("version", projectVersion)

    filesMatching("fabric.mod.json") {
        expand(
                "name": projectName,
                "id": projectId,
                "version": projectVersion
        )
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

classes.dependsOn(processResources)